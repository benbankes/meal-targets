// Generated by typings
// Source: node_modules/any-promise/index.d.ts
declare module '~typings-core~any-promise' {
class Promise <R> implements Promise.Thenable <R> {
  /**
   * If you call resolve in the body of the callback passed to the constructor,
   * your promise is fulfilled with result object passed to resolve.
   * If you call reject your promise is rejected with the object passed to resolve.
   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
   * Any errors thrown in the constructor callback will be implicitly passed to reject().
   */
  constructor (callback: (resolve : (value?: R | Promise.Thenable<R>) => void, reject: (error?: any) => void) => void);

  /**
   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
   * If an error is thrown in the callback, the returned promise rejects with that error.
   *
   * @param onFulfilled called when/if "promise" resolves
   * @param onRejected called when/if "promise" rejects
   */
  then <U> (onFulfilled?: (value: R) => U | Promise.Thenable<U>, onRejected?: (error: any) => U | Promise.Thenable<U>): Promise<U>;
  then <U> (onFulfilled?: (value: R) => U | Promise.Thenable<U>, onRejected?: (error: any) => void): Promise<U>;

  /**
   * Sugar for promise.then(undefined, onRejected)
   *
   * @param onRejected called when/if "promise" rejects
   */
  catch <U> (onRejected?: (error: any) => U | Promise.Thenable<U>): Promise<U>;

  /**
   * Make a new promise from the thenable.
   * A thenable is promise-like in as far as it has a "then" method.
   */
  static resolve (): Promise<void>;
  static resolve <R> (value: R | Promise.Thenable<R>): Promise<R>;

  /**
   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
   */
  static reject <R> (error: any): Promise<R>;

  /**
   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
   * the array passed to all can be a mixture of promise-like objects and other objects.
   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
   */
  static all <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>, T4 | Promise.Thenable <T4>, T5 | Promise.Thenable<T5>, T6 | Promise.Thenable<T6>, T7 | Promise.Thenable<T7>, T8 | Promise.Thenable<T8>, T9 | Promise.Thenable<T9>, T10 | Promise.Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
  static all <T1, T2, T3, T4, T5, T6, T7, T8, T9> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>, T4 | Promise.Thenable <T4>, T5 | Promise.Thenable<T5>, T6 | Promise.Thenable<T6>, T7 | Promise.Thenable<T7>, T8 | Promise.Thenable<T8>, T9 | Promise.Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
  static all <T1, T2, T3, T4, T5, T6, T7, T8> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>, T4 | Promise.Thenable <T4>, T5 | Promise.Thenable<T5>, T6 | Promise.Thenable<T6>, T7 | Promise.Thenable<T7>, T8 | Promise.Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
  static all <T1, T2, T3, T4, T5, T6, T7> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>, T4 | Promise.Thenable <T4>, T5 | Promise.Thenable<T5>, T6 | Promise.Thenable<T6>, T7 | Promise.Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
  static all <T1, T2, T3, T4, T5, T6> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>, T4 | Promise.Thenable <T4>, T5 | Promise.Thenable<T5>, T6 | Promise.Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
  static all <T1, T2, T3, T4, T5> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>, T4 | Promise.Thenable <T4>, T5 | Promise.Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
  static all <T1, T2, T3, T4> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>, T4 | Promise.Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
  static all <T1, T2, T3> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>, T3 | Promise.Thenable<T3>]): Promise<[T1, T2, T3]>;
  static all <T1, T2> (values: [T1 | Promise.Thenable<T1>, T2 | Promise.Thenable<T2>]): Promise<[T1, T2]>;
  static all <T1> (values: [T1 | Promise.Thenable<T1>]): Promise<[T1]>;
  static all <TAll> (values: Array<TAll | Promise.Thenable<TAll>>): Promise<TAll[]>;

  /**
   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
   */
  static race <R> (promises: (R | Promise.Thenable<R>)[]): Promise<R>;
}

namespace Promise {
  export interface Thenable <R> {
    then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
    then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
  }
}

export = Promise;
}

// Generated by typings
// Source: node_modules/typings-core/dist/utils/parse.d.ts
declare module '~typings-core/dist/utils/parse' {
import { Dependency, DependencyMeta } from '~typings-core/dist/interfaces';
export function parseDependency(raw: string): Dependency;
export function resolveDependency(raw: string, filename: string): string;
export interface ParseDependencyOptions {
    name?: string;
    source?: string;
}
export function parseDependencyExpression(raw: string, options?: ParseDependencyOptions): {
    name: string;
    location: string;
};
export function buildDependencyExpression(type: string, meta: DependencyMeta): string;
export function expandRegistry(raw: string, options?: ParseDependencyOptions): string;
}
declare module 'typings-core/dist/utils/parse' {
export * from '~typings-core/dist/utils/parse';
}

// Generated by typings
// Source: node_modules/typings-core/dist/install.d.ts
declare module '~typings-core/dist/install' {
import Promise = require('~typings-core~any-promise');
import { parseDependencyExpression, buildDependencyExpression } from '~typings-core/dist/utils/parse';
import { DependencyTree, Emitter, ResolutionMap } from '~typings-core/dist/interfaces';
export { parseDependencyExpression, buildDependencyExpression };
export interface InstallDependencyOptions {
    save?: boolean;
    saveDev?: boolean;
    savePeer?: boolean;
    global?: boolean;
    cwd: string;
    name?: string;
    source?: string;
    emitter?: Emitter;
}
export interface InstallOptions {
    cwd: string;
    production?: boolean;
    emitter?: Emitter;
}
export interface InstallResult {
    tree: DependencyTree;
    name?: string;
}
export interface InstallDependencyNestedOptions extends InstallDependencyOptions {
    resolutions: ResolutionMap;
}
export function install(options: InstallOptions): Promise<InstallResult>;
export interface InstallExpression {
    name: string;
    location: string;
}
export function installDependencyRaw(raw: string, options: InstallDependencyOptions): Promise<InstallResult>;
export function installDependenciesRaw(raw: string[], options: InstallDependencyOptions): Promise<InstallResult[]>;
export function installDependency(expression: InstallExpression, options: InstallDependencyOptions): Promise<InstallResult>;
export function installDependencies(expressions: InstallExpression[], options: InstallDependencyOptions): Promise<InstallResult[]>;
}
declare module 'typings-core/dist/install' {
export * from '~typings-core/dist/install';
}

// Generated by typings
// Source: node_modules/typings-core/dist/uninstall.d.ts
declare module '~typings-core/dist/uninstall' {
import Promise = require('~typings-core~any-promise');
import { Emitter } from '~typings-core/dist/interfaces';
export interface UninstallDependencyOptions {
    save?: boolean;
    saveDev?: boolean;
    savePeer?: boolean;
    global?: boolean;
    cwd: string;
    emitter?: Emitter;
}
export function uninstallDependency(name: string, options: UninstallDependencyOptions): Promise<any>;
export function uninstallDependencies(names: string[], options: UninstallDependencyOptions): Promise<any>;
}
declare module 'typings-core/dist/uninstall' {
export * from '~typings-core/dist/uninstall';
}

// Generated by typings
// Source: node_modules/typings-core/dist/init.d.ts
declare module '~typings-core/dist/init' {
import Promise = require('~typings-core~any-promise');
export interface InitOptions {
    cwd: string;
    name?: string;
    main?: string;
    version?: string;
    upgrade?: boolean;
}
export function init(options: InitOptions): Promise<void>;
}
declare module 'typings-core/dist/init' {
export * from '~typings-core/dist/init';
}

// Generated by typings
// Source: node_modules/typings-core/dist/bundle.d.ts
declare module '~typings-core/dist/bundle' {
import Promise = require('~typings-core~any-promise');
import { Emitter } from '~typings-core/dist/interfaces';
import { InstallResult } from '~typings-core/dist/install';
export interface BundleOptions {
    name?: string;
    cwd: string;
    global?: boolean;
    resolution?: string;
    out: string;
    emitter?: Emitter;
}
export function bundle(options: BundleOptions): Promise<InstallResult>;
}
declare module 'typings-core/dist/bundle' {
export * from '~typings-core/dist/bundle';
}

// Generated by typings
// Source: node_modules/typings-core/dist/search.d.ts
declare module '~typings-core/dist/search' {
import Promise = require('~typings-core~any-promise');
export interface SearchOptions {
    query?: string;
    name?: string;
    source?: string;
    offset?: string;
    limit?: string;
    order?: string;
    sort?: string;
}
export interface SearchResults {
    total: number;
    results: Array<{
        name: string;
        source: string;
        homepage: string;
        description: string;
        updated: string;
        versions: number;
    }>;
}
export function search(options?: SearchOptions): Promise<SearchResults>;
}
declare module 'typings-core/dist/search' {
export * from '~typings-core/dist/search';
}

// Generated by typings
// Source: node_modules/typings-core/dist/interfaces/config.d.ts
declare module '~typings-core/dist/interfaces/config' {
export interface ConfigJson {
    main?: string;
    browser?: Browser;
    version?: string;
    homepage?: string;
    resolution?: string | ResolutionMap;
    files?: string[];
    global?: boolean;
    postmessage?: string;
    name?: string;
    dependencies?: Dependencies;
    devDependencies?: Dependencies;
    peerDependencies?: Dependencies;
    globalDependencies?: Dependencies;
    globalDevDependencies?: Dependencies;
}
export type DependencyString = string;
export type Browser = string | Overrides;
export interface Overrides {
    [dependency: string]: string;
}
export interface Dependencies {
    [name: string]: DependencyString;
}
export interface ResolutionMap {
    main?: string;
    browser?: string;
    [resolution: string]: string;
}
}
declare module 'typings-core/dist/interfaces/config' {
export * from '~typings-core/dist/interfaces/config';
}

// Generated by typings
// Source: node_modules/typings-core/dist/interfaces/rc.d.ts
declare module '~typings-core/dist/interfaces/rc' {
export interface RcConfig {
    proxy?: string;
    httpProxy?: string;
    httpsProxy?: string;
    noProxy?: string;
    rejectUnauthorized?: boolean;
    ca?: string | string[];
    key?: string;
    cert?: string;
    userAgent?: string;
    githubToken?: string;
    registryURL?: string;
    defaultSource?: string;
}
}
declare module 'typings-core/dist/interfaces/rc' {
export * from '~typings-core/dist/interfaces/rc';
}

// Generated by typings
// Source: node_modules/typings-core/dist/interfaces/emitter.d.ts
declare module '~typings-core/dist/interfaces/emitter' {
import { EventEmitter } from 'events';
import { Dependencies } from '~typings-core/dist/interfaces/config';
import { DependencyTree } from '~typings-core/dist/interfaces/dependencies';
export interface Emitter extends EventEmitter {
    on(event: 'reference', listener: (e: ReferenceEvent) => any): this;
    on(event: 'resolve', listener: (e: ResolveEvent) => any): this;
    on(event: 'resolved', listener: (e: ResolvedEvent) => any): this;
    on(event: 'enoent', listener: (e: EnoentEvent) => any): this;
    on(event: 'compile', listener: (e: CompileEvent) => any): this;
    on(event: 'compiled', listener: (e: CompiledEvent) => any): this;
    on(event: 'hastypings', listener: (e: HasTypingsEvent) => any): this;
    on(event: 'postmessage', listener: (e: PostMessageEvent) => any): this;
    on(event: 'globaldependencies', listener: (e: GlobalDependenciesEvent) => any): this;
    on(event: 'badlocation', listener: (e: BadLocationEvent) => any): this;
    on(event: 'prune', listener: (e: PruneEvent) => any): this;
    on(event: string, listener: Function): this;
    emit(event: 'reference', e: ReferenceEvent): boolean;
    emit(event: 'resolve', e: ResolveEvent): boolean;
    emit(event: 'resolved', e: ResolvedEvent): boolean;
    emit(event: 'enoent', e: EnoentEvent): boolean;
    emit(event: 'compile', e: CompileEvent): boolean;
    emit(event: 'compiled', e: CompiledEvent): boolean;
    emit(event: 'hastypings', e: HasTypingsEvent): boolean;
    emit(event: 'postmessage', e: PostMessageEvent): boolean;
    emit(event: 'globaldependencies', e: GlobalDependenciesEvent): boolean;
    emit(event: 'badlocation', e: BadLocationEvent): boolean;
    emit(event: 'prune', e: PruneEvent): boolean;
    emit(event: string, ...args: any[]): boolean;
}
export interface ReferenceEvent {
    name: string;
    path: string;
    tree: DependencyTree;
    resolution: string;
    reference: string;
}
export interface ResolveEvent {
    src: string;
    raw: string;
    name: string;
    parent: DependencyTree;
}
export interface ResolvedEvent extends ResolveEvent {
    tree: DependencyTree;
}
export interface EnoentEvent {
    path: string;
}
export interface CompileEvent {
    name: string;
    path: string;
    tree: DependencyTree;
    resolution: boolean;
}
export interface CompiledEvent extends CompileEvent {
    contents: string;
}
export interface HasTypingsEvent {
    source: string;
    name: string;
    path: string;
    typings: string;
}
export interface PostMessageEvent {
    name: string;
    message: string;
}
export interface GlobalDependenciesEvent {
    name: string;
    raw: string;
    dependencies: Dependencies;
}
export interface BadLocationEvent {
    type: string;
    raw: string;
    location: string;
}
export interface PruneEvent {
    name: string;
    global: boolean;
    resolution: string;
}
}
declare module 'typings-core/dist/interfaces/emitter' {
export * from '~typings-core/dist/interfaces/emitter';
}

// Generated by typings
// Source: node_modules/typings-core/dist/interfaces/dependencies.d.ts
declare module '~typings-core/dist/interfaces/dependencies' {
import { Browser } from '~typings-core/dist/interfaces/config';
export interface Dependency {
    type: string;
    raw: string;
    location: string;
    meta: DependencyMeta;
}
export interface DependencyMeta {
    name?: string;
    path?: string;
    org?: string;
    repo?: string;
    sha?: string;
    version?: string;
    tag?: string;
    source?: string;
}
export interface DependencyTree {
    name?: string;
    version?: string;
    main?: string;
    browser?: Browser;
    typings?: string;
    browserTypings?: Browser;
    parent?: DependencyTree;
    files?: string[];
    postmessage?: string;
    src: string;
    raw: string;
    global: boolean;
    dependencies: DependencyBranch;
    devDependencies: DependencyBranch;
    peerDependencies: DependencyBranch;
    globalDependencies: DependencyBranch;
    globalDevDependencies: DependencyBranch;
}
export interface DependencyBranch {
    [name: string]: DependencyTree;
}
}
declare module 'typings-core/dist/interfaces/dependencies' {
export * from '~typings-core/dist/interfaces/dependencies';
}

// Generated by typings
// Source: node_modules/typings-core/dist/interfaces.d.ts
declare module '~typings-core/dist/interfaces' {
export * from '~typings-core/dist/interfaces/config';
export * from '~typings-core/dist/interfaces/rc';
export * from '~typings-core/dist/interfaces/emitter';
export * from '~typings-core/dist/interfaces/dependencies';
}
declare module 'typings-core/dist/interfaces' {
export * from '~typings-core/dist/interfaces';
}

// Generated by typings
// Source: node_modules/typings-core/dist/list.d.ts
declare module '~typings-core/dist/list' {
import Promise = require('~typings-core~any-promise');
import { Emitter, DependencyTree } from '~typings-core/dist/interfaces';
export interface ListOptions {
    cwd: string;
    production?: boolean;
    emitter?: Emitter;
}
export function list(options: ListOptions): Promise<DependencyTree>;
}
declare module 'typings-core/dist/list' {
export * from '~typings-core/dist/list';
}

// Generated by typings
// Source: node_modules/typings-core/dist/open.d.ts
declare module '~typings-core/dist/open' {
export interface OpenOptions {
    homepage?: boolean;
    issues?: boolean;
}
export function open(raw: string, options?: OpenOptions): string;
}
declare module 'typings-core/dist/open' {
export * from '~typings-core/dist/open';
}

// Generated by typings
// Source: node_modules/typings-core/dist/view.d.ts
declare module '~typings-core/dist/view' {
import Promise = require('~typings-core~any-promise');
export interface ViewOptions {
}
export function viewEntry(raw: string, options: ViewOptions): Promise<{}>;
export function viewVersions(raw: string, options: ViewOptions): Promise<{}>;
}
declare module 'typings-core/dist/view' {
export * from '~typings-core/dist/view';
}

// Generated by typings
// Source: node_modules/typings-core/dist/prune.d.ts
declare module '~typings-core/dist/prune' {
import Promise = require('~typings-core~any-promise');
import { Emitter } from '~typings-core/dist/interfaces';
export interface PruneOptions {
    cwd: string;
    production?: boolean;
    emitter?: Emitter;
}
export function prune(options: PruneOptions): Promise<void>;
export function rmDependency(options: {
    name: string;
    global: boolean;
    path: string;
    emitter: Emitter;
}): Promise<void>;
}
declare module 'typings-core/dist/prune' {
export * from '~typings-core/dist/prune';
}

// Generated by typings
// Source: node_modules/typings-core/dist/typings.d.ts
declare module '~typings-core/dist/typings' {
export * from '~typings-core/dist/install';
export * from '~typings-core/dist/uninstall';
export * from '~typings-core/dist/init';
export * from '~typings-core/dist/bundle';
export * from '~typings-core/dist/search';
export * from '~typings-core/dist/interfaces';
export * from '~typings-core/dist/list';
export * from '~typings-core/dist/open';
export * from '~typings-core/dist/view';
export * from '~typings-core/dist/prune';
export const VERSION: any;
}
declare module 'typings-core/dist/typings' {
export * from '~typings-core/dist/typings';
}
declare module 'typings-core' {
export * from '~typings-core/dist/typings';
}
